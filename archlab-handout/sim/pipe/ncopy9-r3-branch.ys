#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
	iaddq $-9,%rdx
	jl BR 
Loop9:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n1
	iaddq $1,%rax 	# count++
n1:
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n2
	iaddq $1,%rax 	# count++
n2:
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n3
	iaddq $1,%rax 	# count++
n3:
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n4
	iaddq $1,%rax 	# count++
n4:
	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n5
	iaddq $1,%rax 	# count++
n5:
	mrmovq 40(%rdi), %r11	# read val from src...
	rmmovq %r11, 40(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n6
	iaddq $1,%rax 	# count++
n6:
	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n7
	iaddq $1,%rax 	# count++
n7:
	mrmovq 56(%rdi), %r11	# read val from src...
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n8
	iaddq $1,%rax 	# count++
n8:
	mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n9
	iaddq $1,%rax 	# count++
n9:
	iaddq $72,%rdi
	iaddq $72,%rsi
	iaddq $-9,%rdx
	jge Loop9		# 

BR:
	iaddq $6,%rdx
	jl Left
	je	L3
	iaddq $-3,%rdx
	jl	L45
	je	L6
	iaddq $-1,%rdx
	je L7
	jmp L8
L45:
	iaddq $1,%rdx
	jl L4
	jmp L5
Left:
	iaddq $2,%rdx
	je	L1
	jg	L2	
	ret
L8:
	mrmovq 56(%rdi), %r10	# read val from src...
	rmmovq %r10,56(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L7 
	iaddq $1,%rax 	# count++
L7:
	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r10,48(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L6 
	iaddq $1,%rax 	# count++
L6:
	mrmovq 40(%rdi), %r10	# read val from src...
	rmmovq %r10,40(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L5
	iaddq $1,%rax 	# count++
L5:
	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r10,32(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L4
	iaddq $1,%rax 	# count++
L4:
	mrmovq 24(%rdi), %r10	# read val from src...
	rmmovq %r10,24(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L3
	iaddq $1,%rax 	# count++
L3:
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10,16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L2
	iaddq $1,%rax 	# count++
L2:
	mrmovq 8(%rdi), %r10	# read val from src...
	rmmovq %r10,8(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L1
	iaddq $1,%rax 	# count++
L1:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10,(%rsi)
	andq %r10, %r10		# val <= 0?
	jle  Done
	iaddq $1,%rax 	# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
