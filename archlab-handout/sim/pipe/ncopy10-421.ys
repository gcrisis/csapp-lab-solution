#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
	iaddq $-10,%rdx
	jl L4 
Loop10:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...
	mrmovq 32(%rdi), %r14	# read val from src...
	mrmovq 40(%rdi), %r8	# read val from src...
	mrmovq 48(%rdi), %r9	# read val from src...
	mrmovq 56(%rdi), %rbp	# read val from src...
	mrmovq 64(%rdi), %rcx	# read val from src...
	mrmovq 72(%rdi), %rbx	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	rmmovq %r14, 32(%rsi)	# ...and store it to dst
	rmmovq %r8, 40(%rsi)	# ...and store it to dst
	rmmovq %r9, 48(%rsi)	# ...and store it to dst
	rmmovq %rbp, 56(%rsi)	# ...and store it to dst
	rmmovq %rcx, 64(%rsi)	# ...and store it to dst
	rmmovq %rbx, 72(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n1
	iaddq $1,%rax 	# count++
n1:
	andq %r11, %r11		# val <= 0?
	jle n2
	iaddq $1,%rax 	# count++
n2:
	andq %r12, %r12		# val <= 0?
	jle n3
	iaddq $1,%rax 	# count++
n3:
	andq %r13, %r13		# val <= 0?
	jle n4
	iaddq $1,%rax 	# count++
n4:
	andq %r14, %r14		# val <= 0?
	jle n5
	iaddq $1,%rax 	# count++
n5:
	andq %r8, %r8		# val <= 0?
	jle n6
	iaddq $1,%rax 	# count++
n6:
	andq %r9, %r9		# val <= 0?
	jle n7
	iaddq $1,%rax 	# count++
n7:
	andq %rbp, %rbp		# val <= 0?
	jle n8
	iaddq $1,%rax 	# count++
n8:
	andq %rcx, %rcx		# val <= 0?
	jle n9
	iaddq $1,%rax 	# count++
n9:
	andq %rbx, %rbx		# val <= 0?
	jle n10
	iaddq $1,%rax 	# count++
n10:
	iaddq $80,%rdi
	iaddq $80,%rsi
	iaddq $-10,%rdx
	jge Loop10		# 
L4:
	iaddq $6,%rdx
	jl L2		# if so, goto Done:
Loop4:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n41
	iaddq $1,%rax 	# count++
n41:
	andq %r11, %r11		# val <= 0?
	jle n42
	iaddq $1,%rax 	# count++
n42:
	andq %r12, %r12		# val <= 1?
	jle n43
	iaddq $1,%rax 	# count++
n43:
	andq %r13, %r13		# val <= 0?
	jle n44
	iaddq $1,%rax 	# count++
n44:
	iaddq $32,%rdi
	iaddq $32,%rsi
	iaddq $-4,%rdx
	jl L2
	jge Loop4 
L2:
	iaddq $2,%rdx
	jl L1
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	iaddq $16,%rdi
	iaddq $16, %rsi		# dst++
	andq %r10, %r10		# val <= 0?
	jle N21		# if so, goto Npos:
	iaddq $1,%rax 	# count++
N21:
	iaddq $-2,%rdx
	andq %r11,%r11
	jle L1
	iaddq $1,%rax
L1:
	iaddq $1,%rdx
	je N11 		# if so, goto Done:
	ret
N11:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $1,%rax 	# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
