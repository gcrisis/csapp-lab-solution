#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
	iaddq $-10,%rdx
	jl BR 
Loop10:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n1
	iaddq $1,%rax 	# count++
n1:
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n2
	iaddq $1,%rax 	# count++
n2:
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n3
	iaddq $1,%rax 	# count++
n3:
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n4
	iaddq $1,%rax 	# count++
n4:
	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n5
	iaddq $1,%rax 	# count++
n5:
	mrmovq 40(%rdi), %r11	# read val from src...
	rmmovq %r11, 40(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n6
	iaddq $1,%rax 	# count++
n6:
	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n7
	iaddq $1,%rax 	# count++
n7:
	mrmovq 56(%rdi), %r11	# read val from src...
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle n8
	iaddq $1,%rax 	# count++
n8:
	mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n9
	iaddq $1,%rax 	# count++
n9:
	mrmovq 72(%rdi), %r10	# read val from src...
	rmmovq %r10, 72(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle n10
	iaddq $1,%rax 	# count++
n10:
	iaddq $80,%rdi
	iaddq $80,%rsi
	iaddq $-10,%rdx
	jge Loop10		# 

BR:
	iaddq $7,%rdx
	jl Left
	jg Right
	je	L3
L45:
	iaddq $1,%rdx
	jl L4
	jmp L5
Left:
	iaddq $2,%rdx
	je	L1
	jg	L2	
	ret
Right:
	iaddq $-3,%rdx
	jl	L45
	je	L6
	iaddq $-2,%rdx
	jl L7
	je L8
L9:
	mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r10,64(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L8 
	iaddq $1,%rax 	# count++
L8:
	mrmovq 56(%rdi), %r10	# read val from src...
	rmmovq %r10,56(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L7 
	iaddq $1,%rax 	# count++
L7:
	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r10,48(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L6 
	iaddq $1,%rax 	# count++
L6:
	mrmovq 40(%rdi), %r10	# read val from src...
	rmmovq %r10,40(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L5
	iaddq $1,%rax 	# count++
L5:
	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r10,32(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L4
	iaddq $1,%rax 	# count++
L4:
	mrmovq 24(%rdi), %r10	# read val from src...
	rmmovq %r10,24(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L3
	iaddq $1,%rax 	# count++
L3:
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10,16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L2
	iaddq $1,%rax 	# count++
L2:
	mrmovq 8(%rdi), %r10	# read val from src...
	rmmovq %r10,8(%rsi)
	andq %r10, %r10		# val <= 0?
	jle L1
	iaddq $1,%rax 	# count++
L1:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10,(%rsi)
	andq %r10, %r10		# val <= 0?
	jle  Done
	iaddq $1,%rax 	# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad 4
	.quad -5
	.quad 6
	.quad 7
	.quad 8
	.quad 9
	.quad -10
	.quad 11
	.quad 12
	.quad -13
	.quad -14
	.quad 15
	.quad -16
	.quad 17
	.quad 18
	.quad -19
	.quad -20
	.quad -21
	.quad -22
	.quad 23
	.quad -24
	.quad -25
	.quad 26
	.quad 27
	.quad 28
	.quad 29
	.quad -30
	.quad 31
	.quad 32
	.quad -33
	.quad 34
	.quad -35
	.quad -36
	.quad -37
	.quad -38
	.quad -39
	.quad -40
	.quad 41
	.quad 42
	.quad 43
	.quad -44
	.quad -45
	.quad -46
	.quad -47
	.quad 48
	.quad 49
	.quad -50
	.quad 51
	.quad 52
	.quad 53
	.quad -54
	.quad -55
	.quad 56
	.quad 57
	.quad -58
	.quad -59
	.quad 60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
